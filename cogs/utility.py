import discordimport datetimefrom typing import Unionimport randomimport inspectimport jsonimport discord.extfrom discord.ext import commandsfrom typing import Unionfrom datetime import datetimefrom discord import Embedimport asynciofrom discord import Spotifyfrom google_trans_new import google_translator  as Translatorfrom googlesearch import search class Utility(commands.Cog):    def __init__(self, bot):    	self.bot = bot    	self.bot.translator = Translator()        @commands.command(help="Make an poll!")    @commands.is_owner()    async def poll(self, ctx, question, *options: str):        if len(options) <= 1:            await ctx.send('You need more than one option to make a poll!')            return        if len(options) > 10:            await cx.send('You cannot make a poll for more than 10 things!')            return        if len(options) == 2 and options[0] == 'yes' and options[1] == 'no':            reactions = ['‚úÖ', '‚ùå']        else:            reactions = ['1‚É£', '2‚É£', '3‚É£', '4‚É£', '5‚É£', '6‚É£', '7‚É£', '8‚É£', '9‚É£', 'üîü']        description = []        for x, option in enumerate(options):            description += '\n {} {}'.format(reactions[x], option)        embed = discord.Embed(title=question, description=''.join(description))        react_message = await ctx.send(embed=embed)        for reaction in reactions[:len(options)]:            await react_message.add_reaction(reaction)        embed.set_footer(text='Poll ID: {}'.format(react_message.id))        await react_message.edit(embed=embed)               @commands.command(help="Translate!")    async def translate(self, ctx, lang, *, text):    	translated = self.bot.translator.translate(text, lang_tgt=lang)    	detected = self.bot.translator.detect(text)    	await ctx.embed(description=f"{translated}\nDetected language: {detected}")        @commands.command(help="Make am embed!")    async def embed(self, ctx):    	try:    		def check(msg):    			return msg.author == ctx.author    		await ctx.embed(description="What should the description be?")    		embed = await self.bot.wait_for("message",check=check, timeout=10)    		await ctx.embed(description="What should the title be?")    	    		title = await self.bot.wait_for("message",check=check, timeout=10)	    		await ctx.embed(title=title.content,description=f"{embed.content}")  		    	except asyncio.TimeoutError:    		await ctx.embed(description="Ya took too long!")    	    	    @commands.command(aliases=['calc'], help="Calculate!", brief="Calculate!")    @commands.is_owner()    async def calculate(self, ctx, operation, *nums):                if operation not in ['+', '-', '*', '/']:        	await ctx.embed(description='Please type a valid operation type.')        else:        	var = f' {operation} '.join(nums)        	await ctx.embed(description=f'{var} = {eval(var)}')    	    @commands.command(name="spotify", help="Get the spotify status!", brief="Get the spotify status!")    async def spotify(self, ctx, user: Union[discord.Member, int] = None):        user = user or ctx.author        if user.activities:            for activity in user.activities:                if isinstance(activity, Spotify):                    embed = discord.Embed(                    title = f"{user.name}'s Spotify",                    description = "Listening to {}".format(activity.title),                    color = self.bot.grey)                    embed.set_thumbnail(url=activity.album_cover_url)                    embed.add_field(name="Artist", value=activity.artist)                    embed.add_field(name="Album", value=activity.album)                    embed.set_footer(text="Song started at {}".format(activity.created_at.strftime("%H:%M")))                    await ctx.send(embed=embed)                else:                   await ctx.embed(title="No spotify for u")        	    @commands.Cog.listener()    async def on_ready(self):    	print(f"Utility Cog has been loaded\n----")    	    @commands.command()    @commands.is_owner()    async def selfpurge(self, ctx, amount: int):        async for message in ctx.message.channel.history(limit=amount).filter(lambda m: m.author == self.bot.user).map(lambda m: m):           try:           	await message.delete()           except Exception as e:           	await ctx.embed(description=e)           	    	    @commands.Cog.listener()    async def on_guild_join(self, guild):    	embed = discord.Embed(title="New **guild!**", description=f"Ive been added to **{guild.name}** with **{guild.member_count}** **members** in it.\nIm now in **{len(self.bot.guilds)}** **guilds**.")    	log_channel = self.bot.get_user(746807014658801704)    	await log_channel.send(embed=embed)        @commands.command(enbaled=False,brief="Get user information.",help="Get the info bout\' a user.",name="userinfo", aliases=["memberinfo", "ui", "mi"])    async def user_info(self, ctx, target: Union[discord.Member, int] = None):    	target = target or ctx.author    	if target.bot == True:	    	    embed = Embed(title="Bot information",colour=self.bot.grey,timestamp=datetime.utcnow())	    	    embed.add_field(name="General:", value=f"**Name:** {str(target)}\n**ID:** {target.id}\n**Nickname:** {target.nick}\n**Bot:** {self.bot.emoji_dict['greenTick']}", inline=False)	    	    embed.add_field(name="Presence info:", value=f"**Status:** {str(target.status).title()}\n**Activity:** {str(target.activity.type).split('.')[-1].title() if target.activity else 'N/A'}\n{target.activity.name if target.activity else ''}", inline=False)	    	    embed.add_field(name="Guild info:", value=f"**Created:** " + target.created_at.strftime("%d/%m/%Y %H:%M:%S") + "\n" + "**Joined:** " + target.joined_at.strftime("%d/%m/%Y %H:%M:%S") + "\n" + "**Top role:** " + target.top_role.mention + "\n" + f"**Roles [{len(target.roles)-1}]:** {', '.join([c.mention for c in target.roles][1:])}" + "\n" + "**Boosted:** " + f"{self.bot.emoji_dict['redTick']}", inline=False)	    	    embed.set_thumbnail(url=target.avatar_url)	    	    try:	    	        await ctx.send(embed=embed)	    	    except:	    	    	await ctx.send("Hmmm?")    	if target.bot == False and bool(target.premium_since) == True:	    	    embed = Embed(title="User information",colour=self.bot.grey,timestamp=datetime.utcnow())	    	    embed.add_field(name="General:", value=f"**Name:** {str(target)}\n**ID:** {target.id}\n**Nickname:** {target.nick}\n**Bot:** {self.bot.emoji_dict['redTick']}", inline=False)	    	    embed.add_field(name="Presence info:", value=f"**Status:** {str(target.status).title()}\n**Activity:** {str(target.activity.type).split('.')[-1].title() if target.activity else 'N/A'}\n{target.activity.name if target.activity else ''}", inline=False)	    	    embed.add_field(name="Guild info:", value=f"**Created:** " + target.created_at.strftime("%d/%m/%Y %H:%M:%S") + "\n" + "**Joined:** " + target.joined_at.strftime("%d/%m/%Y %H:%M:%S") + "\n" + "**Top role:** " + target.top_role.mention + "\n" + f"**Roles [{len(target.roles)-1}]:** {', '.join([c.mention for c in target.roles][1:])}" + "\n" + "**Boosted:** " + f"{self.bot.emoji_dict['greenTick']}", inline=False)	    	    embed.set_thumbnail(url=target.avatar_url)	    	    try:	    	        await ctx.send(embed=embed)	    	    except:	    	    	await ctx.send("Hmmm?")    	if target.bot == False and bool(target.premium_since) == False:	    	    embed = Embed(title="User information",colour=self.bot.grey,timestamp=datetime.utcnow())	    	    embed.add_field(name="General:", value=f"**Name:** {str(target)}\n**ID:** {target.id}\n**Nickname:** {target.nick}\n**Bot:** {self.bot.emoji_dict['redTick']}", inline=False)	    	    embed.add_field(name="Presence info:", value=f"**Status:** {str(target.status).title()}\n**Activity:** {str(target.activity.type).split('.')[-1].title() if target.activity else 'N/A'}\n{target.activity.name if target.activity else ''}", inline=False)	    	    embed.add_field(name="Guild info:", value=f"**Created:** " + target.created_at.strftime("%d/%m/%Y %H:%M:%S") + "\n" + "**Joined:** " + target.joined_at.strftime("%d/%m/%Y %H:%M:%S") + "\n" + "**Top role:** " + target.top_role.mention + "\n" + f"**Roles [{len(target.roles)-1}]:** {', '.join([c.mention for c in target.roles][1:])}" + "\n" + f"**Boosted:** {self.bot.emoji_dict['redTick']}", inline=False)	    	    embed.set_thumbnail(url=target.avatar_url)	    	    try:	    	        await ctx.send(embed=embed)	    	    except:	    	    	await ctx.send("Hmmm?")        @commands.command(brief="Get the info of the server.",help="Get the info of the server.",name="serverinfo", aliases=["guildinfo", "si", "gi"])    async def server_info(self, ctx):    	  embed = Embed(title="Server information",colour=self.bot.grey,timestamp=datetime.utcnow())    	  embed.set_thumbnail(url=ctx.guild.icon_url)    	  embed.add_field(name="ID", value=ctx.guild.id, inline=False)    	  embed.add_field(name="Owner", value=ctx.guild.owner, inline=False)    	  embed.add_field(name="Region", value=ctx.guild.region, inline=False)    	  embed.add_field(name="Created at", value=ctx.guild.created_at.strftime("%d/%m/%Y %H:%M:%S"), inline=False)    	  embed.add_field(name="Members", value=len(ctx.guild.members), inline=False)    	  embed.add_field(name="Humans", value=len(list(filter(lambda m: not m.bot, ctx.guild.members))), inline=False)    	  embed.add_field(name="Bots", value=len(list(filter(lambda m: m.bot, ctx.guild.members))), inline=False)    	  embed.add_field(name="Text channels", value=len(ctx.guild.text_channels), inline=False)    	  embed.add_field(name="Voice channels", value=len(ctx.guild.voice_channels), inline=False)    	  embed.add_field(name="Categories", value=len(ctx.guild.categories), inline=False)    	  embed.add_field(name="Roles", value=len(ctx.guild.roles), inline=False)    	  await ctx.send(embed=embed)    @commands.command(aliases=['pm'], help="Get the perms of a user.", breif="Get perms of a member, idk.")    @commands.is_owner()    async def perms(self, ctx, member: Union[discord.Member, int] = None):    	if member == None:    		member = ctx.author    	perm_string = ', '.join([str(p[0]).replace("_", " ").title() for p in member.guild_permissions if p[1]])           	embed = discord.Embed(colour=self.bot.grey,title=f"Perms of {member}")     	embed.add_field(name="Guild permissions", value=perm_string, inline=False)    	return await ctx.send(embed=embed)def setup(bot):	bot.add_cog(Utility(bot))